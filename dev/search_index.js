var documenterSearchIndex = {"docs":
[{"location":"gridsearch/#Grid-Search","page":"Grid Search","title":"Grid Search","text":"","category":"section"},{"location":"gridsearch/","page":"Grid Search","title":"Grid Search","text":"using FindSteadyStates","category":"page"},{"location":"gridsearch/#Method","page":"Grid Search","title":"Method","text":"","category":"section"},{"location":"gridsearch/","page":"Grid Search","title":"Grid Search","text":"The grid search algorithm provides a greedy search method to exploring all the parameter set. To use grid search method in FindSteadyStates.jl, the range of each agents can be assigned with the list of ranges. ","category":"page"},{"location":"gridsearch/#Usage","page":"Grid Search","title":"Usage","text":"","category":"section"},{"location":"gridsearch/","page":"Grid Search","title":"Grid Search","text":"The ranges are specified in ParameterGrid in the following way:","category":"page"},{"location":"gridsearch/","page":"Grid Search","title":"Grid Search","text":"\nranges = [(1.,10.,10), (1.,10.,20)] # (start, end, grid numer)\nparam_range = ParameterGrid(ranges)\n","category":"page"},{"location":"gridsearch/","page":"Grid Search","title":"Grid Search","text":"julia> param_gen = ParameterGrid([(1.,10.,3), (4., 10., 2.)])\n6-element ParameterGrid:\n [1.0, 4.0]\n [4.0, 4.0]\n [7.0, 4.0]\n [1.0, 7.0]\n [4.0, 7.0]\n [7.0, 7.0]","category":"page"},{"location":"gridsearch/#Reference","page":"Grid Search","title":"Reference","text":"","category":"section"},{"location":"gridsearch/","page":"Grid Search","title":"Grid Search","text":"gridsearch.jl of ScikitLearn.jl . ([link](https://github.com/cstjean/ScikitLearn.jl/blob/master/src/gridsearch.jl))","category":"page"},{"location":"home/#FindSteadyStates.jl","page":"Home","title":"FindSteadyStates.jl","text":"","category":"section"},{"location":"home/","page":"Home","title":"Home","text":"(Image: codecov)","category":"page"},{"location":"home/#Introduction","page":"Home","title":"Introduction","text":"","category":"section"},{"location":"home/","page":"Home","title":"Home","text":"Differential equations-based model is a theoretical approach to explore the phenomenon in real world with mathematical expressions. By integrating theory and empirical knowledge, this approach has been applied to multiple fields including economics, mechanics, electronic circits epidemics and biological systems to provide explanation of the dynamic process and make prediction. For instance, as pandemic COVID-19 arose, the SIR model and its derivatives, which are differential equations-based models,  are essential for the decision of disease control policy (i.e. lockdown and social distancing). Another example is the biological modelling of cell-differentiation which is a transition process of cell expression. When applying these model on the real world problems, it is critical to know the stability of the model, to say, whether a model can approach to a steady point and remain there as time goes to infinity. This is a typical question when dealing with the pandemic: the policy maker needs to how strong the policy is needed to distancing individuals to decrease the transmission rate and further reach to the steady point of the infected people. Hence","category":"page"},{"location":"home/","page":"Home","title":"Home","text":"Exploring the steady states of ODE in given domain.","category":"page"},{"location":"home/","page":"Home","title":"Home","text":"tip: Latest news\nThis model is currently under construction [2020/11/11].","category":"page"},{"location":"home/#Features","page":"Home","title":"Features","text":"","category":"section"},{"location":"home/","page":"Home","title":"Home","text":"Find steady states\nClassify stability: stable and saddle point.","category":"page"},{"location":"home/#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"home/","page":"Home","title":"Home","text":"] add https://github.com/stevengogogo/FindSteadyStates.jl","category":"page"},{"location":"api/","page":"API","title":"API","text":"CurrentModule = FindSteadyStates","category":"page"},{"location":"api/#FindSteadyStates","page":"API","title":"FindSteadyStates","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"","category":"page"},{"location":"api/","page":"API","title":"API","text":"Modules = [FindSteadyStates]","category":"page"},{"location":"api/#FindSteadyStates.DEsteady","page":"API","title":"FindSteadyStates.DEsteady","text":"Struct for solving steady state of an differential equation model.\n\nArgument\n\nfunc: ODE function. \nu0: initial values\np: parameters\nmethod: Method for solving steady-states. (i.e. DifferentialEqiations.Tsit5(), DifferentialEquations.AutoTsit5(Rosenbrock23())) \n\nReference\n\nODE solvers of DifferentialEquations.jl\n\n\n\n\n\n","category":"type"},{"location":"api/#FindSteadyStates.DEsteady-Tuple{Any}","page":"API","title":"FindSteadyStates.DEsteady","text":"Update steady state meta, and return another DEsteady object.\n\njulia> using LabelledArrays, DifferentialEqiations\njulia> deS = DEsteady(func=x->x, u0= LVector(s1=1.0,s2=2.0), p=1.0)\nDEsteady\n  func: #17 (function of type var\"#17#18\")\n  p: Float64 1.0\n  u0: LArray{Float64,1,Array{Float64,1},(:s1, :s2)}\n  method: Tsit5 Tsit5()\n\njulia> deS_new = deS([1000.0,200.0];key=:u0)\nDEsteady\n  func: #17 (function of type var\"#17#18\")\n  p: Float64 1.0\n  u0: LArray{Float64,1,Array{Float64,1},(:s1, :s2)}\n  method: Tsit5 Tsit5()\n\njulia> deS_new.u0\n2-element LArray{Float64,1,Array{Float64,1},(:s1, :s2)}:\n :s1 => 1000.0\n :s2 => 200.0\n\n\n\n\n\n","category":"method"},{"location":"api/#FindSteadyStates.Log_uniform","page":"API","title":"FindSteadyStates.Log_uniform","text":"Sampler for log uniform distribution. a,b ∈ (0,∞)\n\n\n\n\n\n","category":"type"},{"location":"api/#FindSteadyStates.ODEtime","page":"API","title":"FindSteadyStates.ODEtime","text":"Struct for solveing time-series of differential-equations. The data type of ode function is referenced to DifferentialEquations.jl.\n\nArgument\n\nfunc: ODE function. \nu0: initial values\np: parameters\ntspan: time span \n\nReferences\n\nDifferentialEquations.jl\n\n\n\n\n\n","category":"type"},{"location":"api/#FindSteadyStates.ODEtime-Tuple{Any}","page":"API","title":"FindSteadyStates.ODEtime","text":"Reset a field of ODEtime struct with broadcast method. \n\nUsage\n\nWhen using the LabelledArray.jl to define function and subtypes of DEmeta. Use this method to update the values of named arrays without changing the type of the field. \n\nPurpose\n\nThis feature is to solve the LabelledArray problem. when using the field vector to define function, the initial values or parameters need to be Named vectors. However, the grid search iterator returns vector which gets error when apply with the funtion of name vector. \n\nArguement\n\nu0: should be vector or types that can be broadcast. The length of u0 should be same as ODEtime.u0\nkey: field name of the stuct (default: :u0). \n\nExample\n\njulia> using LabelledArrays, DifferentialEqiations\njulia> u = LVector(s1=1.0,s2=0.2)\n2-element LArray{Float64,1,Array{Float64,1},(:s1, :s2)}:\n :s1 => 1.0\n :s2 => 0.2\n\njulia> de = ODEtime(func=x->x, u0=u, p=1.0, tspan=(0.0,1.0))\nODEtime\n  func: #9 (function of type var\"#9#10\")\n  u0: LArray{Float64,1,Array{Float64,1},(:s1, :s2)}\n  p: Float64 1.0\n  tspan: Tuple{Float64,Float64}\n  method: CompositeAlgorithm{Tuple{Tsit5,Rosenbrock23{0,true,DefaultLinSolve,DataType}},AutoSwitch{Tsit5,Rosenbrock23{0,true,DefaultLinSolve,DataType},Rational{Int64},Int64}}\n\njulia> de_new = de([1.3,1.4];key=:u0)\nODEtime\n  func: #9 (function of type var\"#9#10\")\n  u0: LArray{Float64,1,Array{Float64,1},(:s1, :s2)}\n  p: Float64 1.0\n  tspan: Tuple{Float64,Float64}\n  method: CompositeAlgorithm{Tuple{Tsit5,Rosenbrock23{0,true,DefaultLinSolve,DataType}},AutoSwitch{Tsit5,Rosenbrock23{0,true,DefaultLinSolve,DataType},Rational{Int64},Int64}}\n\njulia> de_new.u0 # The updated u0 is the struct of LArray\n2-element LArray{Float64,1,Array{Float64,1},(:s1, :s2)}:\n :s1 => 1.3\n :s2 => 1.4\n\njulia> de.u0\n2-element LArray{Float64,1,Array{Float64,1},(:s1, :s2)}:\n :s1 => 1.0\n :s2 => 0.2\n\n\n\n\n\n","category":"method"},{"location":"api/#FindSteadyStates.ParameterGrid","page":"API","title":"FindSteadyStates.ParameterGrid","text":"Grid search iterator for parameters. The sequence of ranges defines the grids to search.\n\nParameters\n\nParameterGrid: Contain list of ranges. The range is in (start, end, points) order.\n\nExamples\n\njulia> ranges = [ (1.,10.,10.), (1.,10.,10.) ] # list of ranges (start_num, stop_num, number of grids`{int}`)\njulia> param_range = ParameterRange(ranges)\n\n\n\n\n\n","category":"type"},{"location":"api/#FindSteadyStates.ParameterGrid-Tuple{Any,Any}","page":"API","title":"FindSteadyStates.ParameterGrid","text":"Grid object with ranges and distribution function \n\n\n\n\n\n","category":"method"},{"location":"api/#FindSteadyStates.ParameterGrid-Tuple{Any}","page":"API","title":"FindSteadyStates.ParameterGrid","text":"Construct parameter grid from list of ranges ([start, end, grid_num]). The grid distribution is default to be uniform. \n\n\n\n\n\n","category":"method"},{"location":"api/#FindSteadyStates.Uniform","page":"API","title":"FindSteadyStates.Uniform","text":"Sampler for uniform distribution\n\n\n\n\n\n","category":"type"},{"location":"api/#FindSteadyStates.UniformGrid","page":"API","title":"FindSteadyStates.UniformGrid","text":"get the number of a given range from index with uniform distribution.\n\njulia> FindSteadyStates.uniformGrid(1,10,3, 2)\n5\n\n\n\n\n\n","category":"type"},{"location":"api/#Base.getindex-Tuple{ParameterGrid,Int64}","page":"API","title":"Base.getindex","text":"Get the parameters that would be ind th in iteration\n\nThe total sample number is # to do \n\nParemeters\n\nind {int}: The iteration index\n\nReturns\n\nparams: list of numbers in the range of ParameterGrid.param_ranges\n\n\n\n\n\n","category":"method"},{"location":"api/#DiffEqBase.solve-Tuple{DEsteady,Any}","page":"API","title":"DiffEqBase.solve","text":"Multi-thread version of steady-state solver\n\nArguements\n\nfunc: DE function\nus: Vector of vectors of initial variables\np: parameter constant\n\n\n\n\n\n","category":"method"},{"location":"api/#FindSteadyStates.get_sol2array-Tuple{Any}","page":"API","title":"FindSteadyStates.get_sol2array","text":"Get the vector of vectors of results. sol can be :EnsembleSolution or other solutions from DifferentialEquations.solve\n\n\n\n\n\n","category":"method"},{"location":"api/#FindSteadyStates.mul-Tuple{Any,Any}","page":"API","title":"FindSteadyStates.mul","text":"Multipication of series with type converting.\n\n\n\n\n\n","category":"method"},{"location":"api/#FindSteadyStates.mul-Tuple{Any}","page":"API","title":"FindSteadyStates.mul","text":"Multiplication of series.\n\n\n\n\n\n","category":"method"},{"location":"api/#FindSteadyStates.rand_vec-Tuple{Any}","page":"API","title":"FindSteadyStates.rand_vec","text":"General method for sampling a vector with individual samplers\n\n\n\n\n\n","category":"method"},{"location":"api/#FindSteadyStates.rand_vec-Tuple{Integer,FindSteadyStates.Sampler}","page":"API","title":"FindSteadyStates.rand_vec","text":"generate random vector with uniform distribution rand()\n\n\n\n\n\n","category":"method"},{"location":"api/#FindSteadyStates.rand_vec-Union{Tuple{AbstractArray{T,1}}, Tuple{T}} where T<:FindSteadyStates.Sampler","page":"API","title":"FindSteadyStates.rand_vec","text":"Sampling a vector with a list of sampler\n\nREPL\n\nunis = [Uniform(1,2) for i in 1:10]\nvec = rand_vec(unis)\n\n\n\n\n\n","category":"method"},{"location":"api/#FindSteadyStates.rand_vecU-Tuple{Any}","page":"API","title":"FindSteadyStates.rand_vecU","text":"General method. domains can be list of tuples\n\n\n\n\n\n","category":"method"},{"location":"api/#FindSteadyStates.rand_vecU-Tuple{Integer,Domain}","page":"API","title":"FindSteadyStates.rand_vecU","text":"Uniform sampling of vector\n\n\n\n\n\n","category":"method"},{"location":"api/#FindSteadyStates.recursive_index-Tuple{ParameterGrid,Any}","page":"API","title":"FindSteadyStates.recursive_index","text":"Recursive indexing. This function uses list of ranges and index to provide a vector of indexes.\n\nExample\n\njulia> ranges = [(1,2,2), (4,45,2)]\njulia> param_range = ParameterGrid(ranges)\njulia> vec_i = recursive_index(param_range, 4)\njulia> vec_i\n[2,2]\n\n\n\n\n\n","category":"method"},{"location":"api/#FindSteadyStates.update_struct_broadcast-Tuple{Any,Any,Any}","page":"API","title":"FindSteadyStates.update_struct_broadcast","text":"Update a field of struct varibale by broadcasting.\n\nArgument\n\nvar_struc: A struct variable. \nvals: A Vector which has the same length with Base.getfield(var_struc, key) for update the new struct variable.\nkey : A Symbol which can apply Base.getfield(var_struc, key)\n\nReturn\n\nStruct variable similar to var_struc but with renew vals on key site.\n\n\n\n\n\n","category":"method"},{"location":"examples/","page":"examples","title":"examples","text":"    using FindSteadyStates \n    using DifferentialEquations \n    using LabelledArrays ","category":"page"},{"location":"examples/","page":"examples","title":"examples","text":"    using PyPlot","category":"page"},{"location":"examples/#Prerequisite","page":"examples","title":"Prerequisite","text":"","category":"section"},{"location":"examples/","page":"examples","title":"examples","text":"In this section, classicial ordinary differetnaial equations are used to demonstrate the function of FindSteadyStates.jl. Before entering the following sections, one needs to make sure that FindSteadyState.jl and DifferentialEquations.jl are successfully installed and precompiled. ","category":"page"},{"location":"examples/","page":"examples","title":"examples","text":"using FindSteadyStates\nusing DifferentialEquations\nusing LabelledArrays","category":"page"},{"location":"examples/#Exponential-Decay","page":"examples","title":"Exponential Decay","text":"","category":"section"},{"location":"examples/","page":"examples","title":"examples","text":"    deS = DEsteady(func=x->x, u0= LVector(s1=1.0,s2=2.0), p=1.0)\n","category":"page"},{"location":"examples/","page":"examples","title":"examples","text":"    deS = DEsteady(func=x->x, u0= LVector(s1=1.0,s2=2.0), p=1.0)\n","category":"page"},{"location":"examples/","page":"examples","title":"examples","text":"    fig, ax = subplots()\n    ax = plot([1,2],[3,4])\n    fig.savefig(\"test.svg\") # hide\n    @info pwd()","category":"page"},{"location":"examples/","page":"examples","title":"examples","text":"(Image: )","category":"page"},{"location":"examples/#Bistable-Model","page":"examples","title":"Bistable Model","text":"","category":"section"},{"location":"examples/#References","page":"examples","title":"References","text":"","category":"section"},{"location":"examples/#Unstable","page":"examples","title":"Unstable","text":"","category":"section"}]
}
